/*
 * File: app/controller/dashboard_controller.js
 * Date: Wed May 15 2013 05:54:10 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FlexiPay.controller.dashboard_controller', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            nfc_share: '#nfc_share',
            swap_cards: '[ItemId=swap_cards]',
            topup_btn: '#topup_btn',
            pay_btn: '#pay_btn',
            agent_topup: '#agent_topup',
            friend_topup: '#friend_topup',
            mobile_money: '#mobile_money',
            credit_topup: '#credit_topup',
            user_segmented_button: '[ItemId=top_segmented_button]',
            to_friend: '#to_friend',
            to_merchant: '#to_merchant',
            payment_input: '[ItemId=payment_input]',
            amount_ok: '[ItemId=amount_ok]',
            creditcard_topup: '#creditcard_topup',
            loggedin_label: '[ItemId=loggedin_label]',
            accounttype_label: '[ItemId=accounttype_label]',
            accountbalance_label: '[ItemId=accountbalance_label]',
            send_cash: '[action=send_cash]',
            give_cash: '[action=give_cash]',
            future_release: '[action=future_release]'
        },

        control: {
            "user_segmented_button": {
                toggle: 'onSegmentedbuttonToggle'
            },
            "agent_topup": {
                tap: 'onAgent_topupTap'
            },
            "friend_topup": {
                tap: 'onFriend_topupTap'
            },
            "to_merchant": {
                tap: 'onTo_MerchantTap'
            },
            "to_friend": {
                tap: 'onTo_friendTap'
            },
            "amount_ok": {
                tap: 'onAmount_okTap'
            },
            "credittop_up": {
                tap: 'onCredittop_upTap'
            },
            "send_cash": {
                tap: 'onSend_cashTap'
            },
            "give_cash": {
                tap: 'onGive_cashTap'
            },
            "future_release": {
                tap: 'onFuture_releaseTap'
            }
        }
    },

    onSegmentedbuttonToggle: function(segmentedbutton, button, isPressed, eOpts) {
        var swap_cards=this.getSwap_cards();
        var ItemId=button.getItemId();
        if(ItemId==='card0'){
            swap_cards.setActiveItem(0);
        }else if(ItemId==='card1'){
            swap_cards.setActiveItem(1);
        }
    },

    onAgent_topupTap: function(button, e, eOpts) {
        console.log("Agent Top-up Tapped");


        //TODO: Find Out why Its throwing an Exception when back button is pressed
        Ext.Msg.confirm('Action Confirm', 'Depositing Money works by sharing your Account-Number when you tap your phone to an Agent phone. Are you sure?', function(buttonId) {
            if(buttonId == 'yes') {

                // Aliases for record creation functions.
                var createTextRecord = blackberrynfc.ndef.message.createTextRecord;
                var createURIRecord = blackberrynfc.ndef.message.createURIRecord;
                var createSpRecord = blackberrynfc.ndef.message.createSpRecord;

                try {
                    //1. Read Session Variable for user_id
                    var sessionObject = localStorage.getItem('sessionObject');
                    console.log(sessionObject);
                    sessionObject=JSON.parse(sessionObject); 


                    //2. Read the User-Id
                    var text = sessionObject.user_id;

                    //Log the Text
                    console.log(text);
                    var uri = "mytomkim.com";

                    if (text==="" || uri==="") {
                        alert("Please enter text for both fields...");
                        return;
                    }

                    var textRecord = createTextRecord("en",text);
                    //var uriRecord = createURIRecord(uri);
                    var records = Array(textRecord);
                    var spRecord = createSpRecord(records);
                    var data = spRecord.getEncoded("invoke");

                    var query = {
                        "action": "bb.action.SHARE",
                        "type": "application/vnd.rim.nfc.ndef",
                        "data": data
                    };

                    blackberry.invoke.invoke(query);
                } catch (e) {
                    alert("NFC was not detected on your phone!");
                }
            }

            else{
                //Do Nothing
            }
        },this
        );



    },

    onFriend_topupTap: function(button, e, eOpts) {
        console.log("Agent Top-up Tapped");


        //TODO: Find Out why Its throwing an Exception when back button is pressed
        Ext.Msg.confirm('Action Confirm', 'Friend Top-up works by sharing your Account-Number by tapping it to your Friend Phone. Are you sure?', function(buttonId) {
            if(buttonId == 'yes') {

                // Aliases for record creation functions.
                var createTextRecord = blackberrynfc.ndef.message.createTextRecord;
                var createURIRecord = blackberrynfc.ndef.message.createURIRecord;
                var createSpRecord = blackberrynfc.ndef.message.createSpRecord;

                try {
                    //1. Read Session Variable for user_id
                    var sessionObject = localStorage.getItem('sessionObject');
                    console.log(sessionObject);
                    sessionObject=JSON.parse(sessionObject); 


                    //2. Read the User-Id
                    var text = sessionObject.user_id;

                    //Log the Text
                    console.log(text);
                    var uri = "mytomkim.com";

                    if (text==="" || uri==="") {
                        alert("Please enter text for both fields...");
                        return;
                    }

                    var textRecord = createTextRecord("en",text);
                    //var uriRecord = createURIRecord(uri);
                    var records = Array(textRecord);
                    var spRecord = createSpRecord(records);
                    var data = spRecord.getEncoded("invoke");

                    var query = {
                        "action": "bb.action.SHARE",
                        "type": "application/vnd.rim.nfc.ndef",
                        "data": data
                    };

                    blackberry.invoke.invoke(query);
                } catch (e) {
                    alert("NFC was not detected on your phone!");
                }
            }

            else{
                //Do Nothing
            }
        },this
        );

    },

    onTo_MerchantTap: function(button, e, eOpts) {
        //Get the Amount
        var swap_cards=this.getSwap_cards();
        swap_cards.setActiveItem(2);

        //Save it in Session
        var transactionObject = {'action':'to_merchant'};
        localStorage.setItem('transactionObject', transactionObject);

        console.log(transactionObject);
    },

    onTo_friendTap: function(button, e, eOpts) {
        //Get the Amount
        var swap_cards=this.getSwap_cards();
        swap_cards.setActiveItem(2);

        //Save it in Session
        var transactionObject = {'action':'to_friend'};
        localStorage.setItem('transactionObject', transactionObject);

        console.log(transactionObject);
    },

    onAmount_okTap: function(button, e, eOpts) {
        var payment_input=this.getPayment_input();
        var amount= payment_input.getValue();

        if(amount){
            //TODO: Find Out why Its throwing an Exception when back button is pressed
            Ext.Msg.confirm('Action Confirm', 'You are about to transfer Ksh.'+ amount + " ,by placing your phone next to the other Party Phone. Confirm?", function(buttonId) {
                if(buttonId == 'yes') {
                    //Save it in Session
                    var transactionObject = {'amount': amount, 'transaction_type':'payment'};
                    localStorage.setItem('transactionObject', JSON.stringify(transactionObject));

                    console.log(transactionObject);

                    console.log('Waiting for the Other Party to Tap');

                    //Set Masked
                    Ext.Viewport.setMasked({
                        xtype: 'loadmask',
                        message: 'Transfering Ksh. '+ amount + '.Tap your phone with Recipients Phone..'
                    });
                }else{

                }
            },this
            );
        }else{
            Ext.Msg.alert("Check", "Amount Cannot be Blank!");
        }


    },

    onCredittop_upTap: function(button, e, eOpts) {
        Ext.Msg.alert("Information", "This feature is coming Soon on the Next Release");
    },

    onSend_cashTap: function(button, e, eOpts) {
        //Get the Amount
        var swap_cards=this.getSwap_cards();
        swap_cards.setActiveItem(2);

        //Save it in Session
        var transactionObject = {'action':'to_merchant'};
        localStorage.setItem('transactionObject', transactionObject);

        console.log("Send Cash Item has been tapped ....");
    },

    onGive_cashTap: function(button, e, eOpts) {


        //TODO: Find Out why Its throwing an Exception when back button is pressed
        Ext.Msg.confirm('Action Confirm', 'Depositing Money works by sharing your Account-Number when you tap your phone to an Agent phone. Are you sure?', function(buttonId) {
            if(buttonId == 'yes') {

                // Aliases for record creation functions.
                var createTextRecord = blackberrynfc.ndef.message.createTextRecord;
                var createURIRecord = blackberrynfc.ndef.message.createURIRecord;
                var createSpRecord = blackberrynfc.ndef.message.createSpRecord;

                try {
                    //1. Read Session Variable for user_id
                    var sessionObject = localStorage.getItem('sessionObject');
                    console.log(sessionObject);
                    sessionObject=JSON.parse(sessionObject); 


                    //2. Read the User-Id
                    var text = sessionObject.user_id;

                    //Log the Text
                    console.log(text);
                    var uri = "mytomkim.com";

                    if (text==="" || uri==="") {
                        alert("Please enter text for both fields...");
                        return;
                    }

                    var textRecord = createTextRecord("en",text);
                    //var uriRecord = createURIRecord(uri);
                    var records = Array(textRecord);
                    var spRecord = createSpRecord(records);
                    var data = spRecord.getEncoded("invoke");

                    var query = {
                        "action": "bb.action.SHARE",
                        "type": "application/vnd.rim.nfc.ndef",
                        "data": data
                    };

                    blackberry.invoke.invoke(query);
                } catch (e) {
                    alert("NFC was not detected on your phone!");
                }
            }

            else{
                //Do Nothing
            }
        },this
        );
    },

    onFuture_releaseTap: function(button, e, eOpts) {
        Ext.Msg.alert("Information", "This feature is coming Soon on the Next Release");
    },

    launch: function() {

        function shareGood() {
            // The share was invoked...
            Ext.Msg.alert('Successfully Performed the Transaction!');
        }
        function shareBad(error) {
            alert("Could not share: " + error);
        }

        var sessionObject = localStorage.getItem('sessionObject');
        sessionObject=JSON.parse(sessionObject); 

        if(sessionObject){
            var loggedin_label=this.getLoggedin_label();
            logged_in.setHtml(sessionObject.fullnames);

            //Account Type
            var accounttype_label=this.getAccounttype_label();
            accounttype_label.setHtml(sessionObject.access_keys);


            //Account Balance
            var accountbalance_label=this.getAccountbalance_label();
            logged_in.setHtml(sessionObject.account_balance);
        }

    }

});